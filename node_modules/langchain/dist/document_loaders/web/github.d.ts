import { Ignore } from "ignore";
import { Document } from "../../document.js";
import { BaseDocumentLoader } from "../base.js";
import { UnknownHandling } from "../fs/directory.js";
import { AsyncCaller, AsyncCallerParams } from "../../util/async_caller.js";
export interface GithubFile {
    name: string;
    path: string;
    sha: string;
    size: number;
    url: string;
    html_url: string;
    git_url: string;
    download_url: string;
    type: string;
    _links: {
        self: string;
        git: string;
        html: string;
    };
}
export interface GithubRepoLoaderParams extends AsyncCallerParams {
    branch?: string;
    recursive?: boolean;
    unknown?: UnknownHandling;
    accessToken?: string;
    ignoreFiles?: (string | RegExp)[];
    ignorePaths?: string[];
    verbose?: boolean;
    /**
     * The maximum number of concurrent calls that can be made. Defaults to 2.
     */
    maxConcurrency?: number;
    /**
     * The maximum number of retries that can be made for a single call,
     * with an exponential backoff between each attempt. Defaults to 2.
     */
    maxRetries?: number;
}
export declare class GithubRepoLoader extends BaseDocumentLoader implements GithubRepoLoaderParams {
    private readonly owner;
    private readonly repo;
    private readonly initialPath;
    private headers;
    branch: string;
    recursive: boolean;
    unknown: UnknownHandling;
    accessToken?: string;
    ignoreFiles: (string | RegExp)[];
    ignore?: Ignore;
    verbose?: boolean;
    protected caller: AsyncCaller;
    constructor(githubUrl: string, { accessToken, branch, recursive, unknown, ignoreFiles, ignorePaths, verbose, maxConcurrency, maxRetries, ...rest }?: GithubRepoLoaderParams);
    private extractOwnerAndRepoAndPath;
    load(): Promise<Document[]>;
    protected shouldIgnore(path: string, fileType: string): boolean;
    /**
     * Takes the file info and wrap it in a promise that will resolve to the file content and metadata
     * @param file
     * @returns
     */
    private fetchFileContentWrapper;
    /**
     * Maps a list of files / directories to a list of promises that will fetch the file / directory contents
     */
    private getCurrentDirectoryFilePromises;
    /**
     * Begins the process of fetching the contents of the repository
     */
    private processRepo;
    private processDirectory;
    private fetchRepoFiles;
    private fetchFileContent;
    private handleError;
}
