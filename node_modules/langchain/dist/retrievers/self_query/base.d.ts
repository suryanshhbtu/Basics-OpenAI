import { Comparator, Comparison, Operation, Operator, StructuredQuery, Visitor, VisitorComparisonResult, VisitorOperationResult, VisitorStructuredQueryResult } from "../../chains/query_constructor/ir.js";
import { VectorStore } from "../../vectorstores/base.js";
export type TranslatorOpts = {
    allowedOperators: Operator[];
    allowedComparators: Comparator[];
};
export declare abstract class BaseTranslator<T extends VectorStore = VectorStore> extends Visitor<T> {
    abstract formatFunction(func: Operator | Comparator): string;
    abstract mergeFilters(defaultFilter: this["VisitStructuredQueryOutput"]["filter"] | undefined, generatedFilter: this["VisitStructuredQueryOutput"]["filter"] | undefined, mergeType?: "and" | "or" | "replace"): this["VisitStructuredQueryOutput"]["filter"] | undefined;
}
export declare class BasicTranslator<T extends VectorStore = VectorStore> extends BaseTranslator<T> {
    VisitOperationOutput: VisitorOperationResult;
    VisitComparisonOutput: VisitorComparisonResult;
    VisitStructuredQueryOutput: VisitorStructuredQueryResult;
    allowedOperators: Operator[];
    allowedComparators: Comparator[];
    constructor(opts?: TranslatorOpts);
    formatFunction(func: Operator | Comparator): string;
    visitOperation(operation: Operation): this["VisitOperationOutput"];
    visitComparison(comparison: Comparison): this["VisitComparisonOutput"];
    visitStructuredQuery(query: StructuredQuery): this["VisitStructuredQueryOutput"];
    mergeFilters(defaultFilter: VisitorStructuredQueryResult["filter"] | undefined, generatedFilter: VisitorStructuredQueryResult["filter"] | undefined, mergeType?: string): VisitorStructuredQueryResult["filter"] | undefined;
}
