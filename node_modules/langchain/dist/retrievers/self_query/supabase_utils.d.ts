import { StructuredQuery } from "../../chains/query_constructor/ir.js";
import type { SupabaseFilter, SupabaseFilterRPCCall, SupabaseMetadata } from "../../vectorstores/supabase.js";
export declare class ProxyParamsDuplicator {
    duplicationAllowedOps: string[];
    values: [string, string][];
    buildProxyHandler(): ProxyHandler<SupabaseFilter>;
    removeType(value: string): string;
    addDefaultOpClause(prop: string, column: string, value: unknown): void;
    addOrClause(filters: string, { foreignTable }?: {
        foreignTable?: string;
    }): void;
    addFilterClause(column: string, operator: string, value: unknown): void;
    addInClause(column: string, values: unknown[]): void;
    addContainsClause(column: string, value: unknown): void;
    addTextSearchClause(column: string, query: string[], { config, type, }?: {
        config?: string;
        type?: "plain" | "phrase" | "websearch";
    }): void;
    addNotClause(column: string, operator: string, value: unknown): void;
    addMatchClause(query: Record<string, unknown>): void;
    flattenedParams(): string;
    static getFlattenedParams(rpc: SupabaseFilter, filter: SupabaseFilterRPCCall): string;
}
export declare function convertObjectFilterToStructuredQuery(objFilter: SupabaseMetadata): StructuredQuery;
